// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	model "github.com/overridesh/checkout-challenger/internal/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/satori/go.uuid"
)

// PaymentGatewayRepository is an autogenerated mock type for the PaymentGatewayRepository type
type PaymentGatewayRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: payment
func (_m *PaymentGatewayRepository) Create(payment model.Transaction) (*model.Transaction, error) {
	ret := _m.Called(payment)

	var r0 *model.Transaction
	if rf, ok := ret.Get(0).(func(model.Transaction) *model.Transaction); ok {
		r0 = rf(payment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Transaction) error); ok {
		r1 = rf(payment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id, merchantID
func (_m *PaymentGatewayRepository) GetByID(id uuid.UUID, merchantID uuid.UUID) (*model.Transaction, error) {
	ret := _m.Called(id, merchantID)

	var r0 *model.Transaction
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) *model.Transaction); ok {
		r0 = rf(id, merchantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(id, merchantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByMerchantIDAndIdempotencyKey provides a mock function with given fields: merchantID, idempotencyKey
func (_m *PaymentGatewayRepository) GetByMerchantIDAndIdempotencyKey(merchantID uuid.UUID, idempotencyKey string) (*model.Transaction, error) {
	ret := _m.Called(merchantID, idempotencyKey)

	var r0 *model.Transaction
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) *model.Transaction); ok {
		r0 = rf(merchantID, idempotencyKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = rf(merchantID, idempotencyKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: payment, fn
func (_m *PaymentGatewayRepository) Update(payment *model.Transaction, fn func(*model.Transaction) error) error {
	ret := _m.Called(payment, fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Transaction, func(*model.Transaction) error) error); ok {
		r0 = rf(payment, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
