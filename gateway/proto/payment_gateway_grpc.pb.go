// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package payment_gateway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaymentGatewayServiceClient is the client API for PaymentGatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentGatewayServiceClient interface {
	CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatePaymentResponse, error)
	GetPayment(ctx context.Context, in *GetPaymentDetailsRequest, opts ...grpc.CallOption) (*GetPaymentDetailsResponse, error)
}

type paymentGatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentGatewayServiceClient(cc grpc.ClientConnInterface) PaymentGatewayServiceClient {
	return &paymentGatewayServiceClient{cc}
}

func (c *paymentGatewayServiceClient) CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatePaymentResponse, error) {
	out := new(CreatePaymentResponse)
	err := c.cc.Invoke(ctx, "/payment_gateway.PaymentGatewayService/CreatePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentGatewayServiceClient) GetPayment(ctx context.Context, in *GetPaymentDetailsRequest, opts ...grpc.CallOption) (*GetPaymentDetailsResponse, error) {
	out := new(GetPaymentDetailsResponse)
	err := c.cc.Invoke(ctx, "/payment_gateway.PaymentGatewayService/GetPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentGatewayServiceServer is the server API for PaymentGatewayService service.
// All implementations should embed UnimplementedPaymentGatewayServiceServer
// for forward compatibility
type PaymentGatewayServiceServer interface {
	CreatePayment(context.Context, *CreatePaymentRequest) (*CreatePaymentResponse, error)
	GetPayment(context.Context, *GetPaymentDetailsRequest) (*GetPaymentDetailsResponse, error)
}

// UnimplementedPaymentGatewayServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPaymentGatewayServiceServer struct {
}

func (UnimplementedPaymentGatewayServiceServer) CreatePayment(context.Context, *CreatePaymentRequest) (*CreatePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayment not implemented")
}
func (UnimplementedPaymentGatewayServiceServer) GetPayment(context.Context, *GetPaymentDetailsRequest) (*GetPaymentDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayment not implemented")
}

// UnsafePaymentGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentGatewayServiceServer will
// result in compilation errors.
type UnsafePaymentGatewayServiceServer interface {
	mustEmbedUnimplementedPaymentGatewayServiceServer()
}

func RegisterPaymentGatewayServiceServer(s grpc.ServiceRegistrar, srv PaymentGatewayServiceServer) {
	s.RegisterService(&PaymentGatewayService_ServiceDesc, srv)
}

func _PaymentGatewayService_CreatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentGatewayServiceServer).CreatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment_gateway.PaymentGatewayService/CreatePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentGatewayServiceServer).CreatePayment(ctx, req.(*CreatePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentGatewayService_GetPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentGatewayServiceServer).GetPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment_gateway.PaymentGatewayService/GetPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentGatewayServiceServer).GetPayment(ctx, req.(*GetPaymentDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentGatewayService_ServiceDesc is the grpc.ServiceDesc for PaymentGatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentGatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment_gateway.PaymentGatewayService",
	HandlerType: (*PaymentGatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePayment",
			Handler:    _PaymentGatewayService_CreatePayment_Handler,
		},
		{
			MethodName: "GetPayment",
			Handler:    _PaymentGatewayService_GetPayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment_gateway.proto",
}
